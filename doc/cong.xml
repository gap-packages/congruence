<!-- $Id$ -->

<Chapter Label="CongruenceSubgroups">
<Heading>Construction of congruence subgroups</Heading>

<Index Key="IsCongruenceSubgroup"><C>IsCongruenceSubgroup</C></Index>
The package &Congruence; provides functions to construct several
types of canonical congruence subgroups in <M>SL_2(\Z)</M>, and also 
intersections of a finite number of such subgroups. They will return 
a matrix group in the category <C>IsCongruenceSubgroup</C>,
which is defined as a subcategory of <C>IsMatrixGroup</C>, and
which will have a distinguishing property determining whether it is
a congruence subgroup of one of the canonical types, or an intersection
of such congruence subgroups (if it can not be reduced to one of the
canonical congruence subgroups).

To start to work with the package, you need first to load it as follows:

<Example>
<![CDATA[
gap> LoadPackage("congruence");
-----------------------------------------------------------------------------
Loading  Congruence 1.0 (Congruence subgroups of SL(2,Integers))
by Ann Dooms (http://homepages.vub.ac.be/~andooms),
   Eric Jespers (http://homepages.vub.ac.be/~efjesper),
   Alexander Konovalov (http://www.cs.st-andrews.ac.uk/~alexk/), and
   Helena Verrill (http://www.math.lsu.edu/~verrill).
-----------------------------------------------------------------------------
true
]]>
</Example>
 
<Section Label="CongConstr">
<Heading>Construction of congruence subgroups</Heading>
            
<ManSection>
  <Func Name="PrincipalCongruenceSubgroup" 
         Arg="N"  
        Comm="" />
  <Description>
    Returns the principal congruence subgroup <M>\Gamma(N)</M> of level <A>N</A> 
    in <M>SL_2(\Z)</M>.<P/>
    This subgroup consists of 
    all matrices of the form
<Alt Only="LaTeX">
  <Display>
  <![CDATA[
        \left( 
           \begin{array}{rr}
              1+N a & N b \\
              N c   & 1+N d
           \end{array} 
        \right)
  ]]>
  </Display>
</Alt>
<Alt Only="Text,HTML"><Verb><![CDATA[
                         [1+N*a    N*b]
                         [  N*c  1+N*d]
]]></Verb></Alt>   
where <M>a</M>,<M>b</M>,<M>c</M>,<M>d</M> are integers. 
       The returned group will have the property
    <Ref Prop="IsPrincipalCongruenceSubgroup" />.
  </Description>
</ManSection>       

<Example>
<![CDATA[
gap> G_8:=PrincipalCongruenceSubgroup(8);
<principal congruence subgroup of level 8 in SL_2(Z)>
]]>
</Example>


<ManSection>
  <Func Name="Gamma0" 
         Arg="N"  
        Comm="" />
  <Description>
    Returns the congruence subgroup <M>\Gamma_0(N)</M> 
    of level <A>N</A> in <M>SL_2(\Z)</M>.<P/>
    This subgroup consists of 
    all matrices of the form
<Alt Only="LaTeX">
  <Display>
  <![CDATA[
        \left( 
           \begin{array}{rr}
              a & b \\
              N c   & d
           \end{array} 
        \right)
  ]]>
  </Display>
</Alt>
<Alt Only="Text,HTML"><Verb><![CDATA[
                         [a    b]
                         [N*c  d]
]]></Verb></Alt>   
where <M>a</M>,<M>b</M>,<M>c</M>,<M>d</M> are integers. 
         The returned group will have the property
    <Ref Prop="IsGamma0" />.   
  </Description>
</ManSection> 

<Example>
<![CDATA[
gap> G0_4:=Gamma0(4);
<congruence subgroup Gamma_0(4) in SL_2(Z)>
]]>
</Example>


<ManSection>
  <Func Name="GammaUpper0" 
         Arg="N"  
        Comm="" />
  <Description>
    Returns the congruence subgroup <M>\Gamma^0(N)</M> 
    of level <A>N</A> in <M>SL_2(\Z)</M>.<P/>
    This subgroup consists of 
    all matrices of the form
<Alt Only="LaTeX">
  <Display>
  <![CDATA[
        \left( 
           \begin{array}{rr}
              a & N b \\
              c   & d
           \end{array} 
        \right)
  ]]>
  </Display>
</Alt>
<Alt Only="Text,HTML"><Verb><![CDATA[
                         [a  N*b]
                         [c    d]
]]></Verb></Alt>   
where <M>a</M>,<M>b</M>,<M>c</M>,<M>d</M> are integers. 
             The returned group will have the property
    <Ref Prop="IsGammaUpper0" />. 
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> GU0_2:=GammaUpper0(2);
<congruence subgroup Gamma^0(2) in SL_2(Z)>
]]>
</Example>


<ManSection>
  <Func Name="Gamma1" 
         Arg="N"  
        Comm="" />
  <Description>
    Returns the congruence subgroup <M>\Gamma_1(N)</M> 
    of level <A>N</A> in <M>SL_2(\Z)</M>.<P/>
         This subgroup consists of 
    all matrices of the form
<Alt Only="LaTeX">
  <Display>
  <![CDATA[
        \left( 
           \begin{array}{rr}
              1+N a & b \\
              N c   & 1+N d
           \end{array} 
        \right)
  ]]>
  </Display>
</Alt>
<Alt Only="Text,HTML"><Verb><![CDATA[
                         [1+N*a      b]
                         [  N*c  1+N*d]
]]></Verb></Alt>   
where <M>a</M>,<M>b</M>,<M>c</M>,<M>d</M> are integers. 
    The returned group will have the property
    <Ref Prop="IsGamma1" />.            
  </Description>
</ManSection> 

<Example>
<![CDATA[
gap> G1_6:=Gamma1(6);
<congruence subgroup Gamma_1(6) in SL_2(Z)>
]]>
</Example>


<ManSection>
  <Func Name="GammaUpper1" 
         Arg="N"  
        Comm="" />
  <Description>
    Returns the congruence subgroup <M>\Gamma^1(N)</M> 
    of level <A>N</A> in <M>SL_2(\Z)</M>.<P/>
         This subgroup consists of 
    all matrices of the form
<Alt Only="LaTeX">
  <Display>
  <![CDATA[
        \left( 
           \begin{array}{rr}
              1+N a & N b \\
               c   & 1+N d
           \end{array} 
        \right)
  ]]>
  </Display>
</Alt>
<Alt Only="Text,HTML"><Verb><![CDATA[
                         [1+N*a    N*b]
                         [    c  1+N*d]
]]></Verb></Alt>   
where <M>a</M>,<M>b</M>,<M>c</M>,<M>d</M> are integers. 
    The returned group will have the property
    <Ref Prop="IsGammaUpper1" />.               
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> GU1_4:=GammaUpper1(4);
<congruence subgroup Gamma^1(4) in SL_2(Z)>
]]>
</Example>


<ManSection>
  <Func Name="IntersectionOfCongruenceSubgroups" 
         Arg="G1, G2, ..., GN" />
  <Func Name="Intersection" 
         Arg="G1, G2, ..., GN" />         
  <Description>
    Returns the intersection of its arguments, which can be
    congruence subgroups or their intersections, constructed
    with the same function. It is not necessary for the user 
    to use <C>IntersectionOfCongruenceSubgroups</C>, since
    it will be called automatically from <C>Intersection</C>.<P/>
    
    The returned group will have the property
    <Ref Prop="IsIntersectionOfCongruenceSubgroups" />.<P/>
    
    The list of congruence subgroups that form the intersection
    can be obtained using <Ref Attr="DefiningCongruenceSubgroups"/>.
    
    Note, that when the intersection appears to be one of the 
    canonical congruence subgroups, the package will recognize 
    this and will return a canonical subgroup of the 
    appropriate type.
         
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> J:=IntersectionOfCongruenceSubgroups(G0_4,G1_6);
<intersection of congruence subgroups of resulting level 12 in SL_2(Z)>
gap> I:=IntersectionOfCongruenceSubgroups(G0_4,GU1_4);
<principal congruence subgroup of level 4 in SL_2(Z)>
]]>
</Example>

</Section>

<!-- ********************************************************* -->

<Section Label="CongProperties">
<Heading>Properties of congruence subgroups</Heading>

A congruence subgroup constructed by one of the five above listed functions
will have certain properties determining its type. These properties will be
used for method selection by &Congruence; algorithms. Note that they do not
provide an actual test whether a certain matrix group is a congruence subgroup 
or not.

<ManSection>
  <Prop Name="IsPrincipalCongruenceSubgroup" 
         Arg="G"/>                            
  <Description>
    For a congruence subgroup <A>G</A> in the category 
    <C>IsCongruenceSubgroup</C>, returns <K>true</K> if <A>G</A> was
    constructed by <Ref Func="PrincipalCongruenceSubgroup" /> and 
    returns <K>false</K> otherwise. 
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> IsPrincipalCongruenceSubgroup(G8);
true
gap> IsPrincipalCongruenceSubgroup(G04);
false
gap> IsPrincipalCongruenceSubgroup(I);
true
]]>
</Example>


<ManSection>
  <Prop Name="IsGamma0" 
         Arg="G"/>
  <Description>
    For a congruence subgroup <A>G</A> in the category 
    <C>IsCongruenceSubgroup</C>, returns <K>true</K> if 
    <A>G</A> was constructed by <Ref Func="Gamma0" /> 
    and returns <K>false</K> otherwise.  
  </Description>
</ManSection>


<ManSection>
  <Prop Name="IsGammaUpper0" 
         Arg="G"/>
  <Description>
    For a congruence subgroup <A>G</A> in the category 
    <C>IsCongruenceSubgroup</C>, returns <K>true</K> if 
    <A>G</A> was constructed by <Ref Func="GammaUpper0" /> 
    and returns <K>false</K> otherwise.
  </Description>
</ManSection>


<ManSection>
  <Prop Name="IsGamma1" 
         Arg="G"/>
  <Description>
    For a congruence subgroup <A>G</A> in the category 
    <C>IsCongruenceSubgroup</C>, returns <K>true</K> if
    <A>G</A> was constructed by <Ref Func="Gamma1" /> 
    and returns <K>false</K> otherwise.
  </Description>
</ManSection>


<ManSection>
  <Prop Name="IsGammaUpper1" 
         Arg="G"/>                                    
  <Description>
    For a congruence subgroup <A>G</A> in the category 
    <C>IsCongruenceSubgroup</C>, returns <K>true</K> if 
    <A>G</A> was constructed by <Ref Func="GammaUpper1" /> 
    and returns <K>false</K> otherwise.
  </Description>
</ManSection>


<ManSection>
  <Prop Name="IsIntersectionOfCongruenceSubgroups" 
         Arg="G"/>                                    
  <Description>
    For a congruence subgroup <A>G</A> in the category 
    <C>IsCongruenceSubgroup</C>, returns <K>true</K> if
    <A>G</A> was constructed by 
    <Ref Func="IntersectionOfCongruenceSubgroups"/> 
    without the reduction to one of the canonical congruence
    subgroups, and returns <K>false</K> otherwise.
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> IsIntersectionOfCongruenceSubgroups(I);
false
gap> IsIntersectionOfCongruenceSubgroups(J);
true
]]>
</Example>


<ManSection>
  <Func Name="CanEasilyCompareCongruenceSubgroups" 
         Arg="G H"/>                                    
  <Description>
  </Description>
</ManSection>

<Example>
<![CDATA[

]]>
</Example>

</Section>

<!-- ********************************************************* -->

<Section Label="CongAttributes">
<Heading>Attributes of congruence subgroups</Heading>

The next three attributes store key properties of congruence subgroups.

<ManSection>
  <Attr Name="LevelOfCongruenceSubgroup" 
         Arg="G"/>                                    
  <Description>
    Stores the level of the congruence subgroup <A>G</A>.
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> LevelOfCongruenceSubgroup(G8);
8
gap> LevelOfCongruenceSubgroup(G16);
6
gap> LevelOfCongruenceSubgroup(I);
4
gap> LevelOfCongruenceSubgroup(J);
12
]]>
</Example>


<ManSection>
  <Attr Name="IndexInSL2Z" 
         Arg="G"/>                                    
  <Description>
    Stores the index of the congruence subgroup <A>G</A> in <M>SL_2(\Z)</M>.
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> IndexInSL2Z(G8);
384
gap> G2:=PrincipalCongruenceSubgroup(2);
<principal congruence subgroup of level 2 in SL_2(Z)>
gap> IndexInSL2Z(G2);
12
gap> IndexInSL2Z(G14);
12
]]>
</Example>

<ManSection>
  <Attr Name="DefiningCongruenceSubgroups" 
         Arg="G" />
  <Returns>
    list of matrix groups
  </Returns>
  <Description>
    For an intersection of congruence subgroups, returns 
    the list of congruence subgroups forming this intersection. 
    Note that this only works for an intersection of congruence 
    subgroups that can not be reduced to one of the canonical 
    subgroups.
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> DefiningCongruenceSubgroups(J);
[ <congruence subgroup Gamma_0(4) in SL_2(Z)>,
  <congruence subgroup Gamma_1(6) in SL_2(Z)> ]
]]>
</Example>

</Section>

<!-- ********************************************************* -->

<Section Label="CongMethods">
<Heading>Operations over congruence subgroups</Heading>

&Congruence; installs several special methods for operations already 
available in &GAP;.

<ManSection>
  <Oper Name="Random" 
       Label="one and two argument versions"
         Arg="G"/> 
  <Oper Name="Random" 
         Arg="G m"/>                                             
  <Description>
    For a congruence subgroup <A>G</A> in the category 
    <C>IsCongruenceSubgroup</C>, returns random element.
    In the two-argument form, the second parameter will
    control the absolute value of randomly selected 
    entries of the matrix.
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> Random(G2);
[ [ 21, 10 ], [ 2, 1 ] ]
gap> Random(G8,2);
[ [ 1, -16 ], [ 0, 1 ] ]
]]>
</Example>


<ManSection>
  <Oper Name="\in" 
         Arg="m G"/> 
  <Description>
    It is easy to implement the membership test for
    congruence subgroups and their intersections.
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> \in([ [ 21, 10 ], [ 2, 1 ] ],G2);
true
gap> \in([ [ 21, 10 ], [ 2, 1 ] ],G8);
false
]]>
</Example>


<ManSection>
  <Oper Name="IsSubset" 
         Arg="G H"/> 
  <Description>
    &Congruence; provides methods for <C>IsSubset</C>
    for congruence subgroups. <C>IsSubset</C> return <K>true</K> 
    if <A>H</A> is a subset of <A>G</A>. These methods make it possible
    to use <C>IsSubgroup</C> operation for congruence subgroups.
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> IsSubset(G2,G8);
true
gap> IsSubset(G8,G2);
false
]]>
</Example>


<ManSection>
  <Oper Name="Index" 
         Arg="G H"/> 
  <Description>
    If a congruence subgroup <A>H</A> is a subgroup of a congruence 
    subgroup <A>G</A>, we can easily compute the index of <A>H</A> in
    <A>G</A>, since we know the index of both subgroups in <M>SL_2(\Z)</M>.
  </Description>
</ManSection>

<Example>
<![CDATA[
gap> Index(G2,G8);
32
]]>
</Example>

</Section>
 
</Chapter>
